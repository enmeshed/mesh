import { MeshNode, ExtensionHeader } from '@enmeshed/meshnode'
import { FileDataSource } from '@enmeshed/mesh-reflection-file-watcher'
import path from 'path'

node = new MeshNode()
ds = new FileDataSource(path.resolve(process.argv[2], 'config', 'cluster.json'))
node.setReflectionDataSource(ds)

unary(req) -/>
  extensionHeader = ExtensionHeader.get()
  console.log("server serving TestService.unary", req)
  if req.message == 'fail':
    throw new Error("failed call")
  else:
    { message: 'unary reply: ' + req.message + ' extension header: ' + JSON.stringify(extensionHeader.toProtobufFormat()) }

asyncMain() -/>
  <- node.join(process.env.MESH_ENVIRONMENT, process.env.MESH_PROVIDER)

  svc <- node.getServicePort('goodbye')
  svc.bind('test.Test', { unary })
  svc.start()

asyncMain()
  .catch! (err) ->
    console.error(err)
    process.exit(1)
