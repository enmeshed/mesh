import { MeshNode } from '@enmeshed/meshnode'
import { FileDataSource } from '@enmeshed/mesh-reflection-file-watcher'
import EnvoyAuth from './EnvoyAuth'
import UserAuthService from './UserAuthService'
import path from 'path'

node = new MeshNode()
ds = new FileDataSource(path.resolve(process.argv[2], 'config', 'cluster.json'))
node.setReflectionDataSource(ds)

asyncMain() -/>
  <- node.join(process.env.MESH_ENVIRONMENT, process.env.MESH_PROVIDER)

  // Envoy protobufs don't follow a sane naming convention; require them
  // manually.
  <- node.protos.require('envoy/service/auth/v2/external_auth.proto')

  svc <- node.getServicePort('envoy_auth')
  svc.bind('envoy.service.auth.v2.Authorization', EnvoyAuth)
  <- svc.start()

  svc2 <- node.getServicePort('userauth')
  svc2.bind('mesh.auth.UserAuthService', UserAuthService)
  <- svc2.start()

asyncMain()
  .catch! (err) ->
    console.error(err)
    process.exit(1)
