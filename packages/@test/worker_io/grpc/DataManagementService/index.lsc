import { errors } from '@enmeshed/errors'
import { Protocols, withResources } from '@enmeshed/meshnode'

Protocols.require('mesh/data/DataManagementService.proto')

getMigrations = withResources(
  {
    'modelManager': 'model.manager'
  }
  getMigrations({modelManager}, req) -/> {
    migTbl <- modelManager.getMigrationPlan()
    migrations = [...for key k, val v in migTbl:
      [{
        id: k
        platform: k
        migration: v
        description: `Autogenerated migration plan for ${k}`
      }]
    ]

    log.trace('getMigrations: migrations', migrations)

    { migrations }
  } // getMigrations
)

doMigrations = withResources(
  {
    'modelManager': 'model.manager'
  }
  doMigrations({modelManager}, { migrations }) -/> {
    for elem migrationKey in migrations:
      <- modelManager.doMigration(migrationKey)
    {}
  } // getMigrations
)

export default {
  bindings: {
    "mesh.data.DataManagementService": {
      getMigrations
      doMigrations
    }
  }
}
