import { withResources, Tracing, Origin, Protocols } from '@enmeshed/meshnode'
import { verifySessionJWT } from '@mesh/credential'
import { SessionCache } from './SessionCache'

cookie = require('cookie')

Protocols.require('envoy/service/auth/v2/external_auth.proto')

extractToken(appId, headers, cookies) ->
  if headers?.authorization:
    zz = headers.authorization.split(' ')
    if zz?[0] == 'Bearer':
      return zz[1]

  cookieName = `session_${appId}`
  cookies?[cookieName]

sessionCache = new SessionCache(60*1000)

// Get session data, either from cache or remote
getSessionData = withResources(
  {
  }
  getSessionData(_, sessionId) -/> {
    cached = sessionCache.get(sessionId)
    if cached: return cached

    // Clear stale data on fetch passes
    sessionCache.sweep()
  }
)



makeDeniedResponse(reason) ->
  {
    status: { code: 7 }
    denied_response: {
      status: { code: 403 }
      body: JSON.stringify({
        reason
      })
    }
  }

makeOKResponse(context) ->
  // Convert context to Envoy header injection
  headerValues = {}
  context.toHeaders(headerValues)
  newHeaders = [...for key k, val v in headerValues: [{
    header: { key: k, value: v }
    append: { value: false }
  }]]

  // Create an envoy.service.auth.v2.CheckResponse object
  {
    status: { code: 0 }
    ok_response: { headers: newHeaders }
  }

makeAuthenticatedResponse(userId, sessionId) ->
  // Create initial user security context
  context = Context.create({
    type: 'user'
    items: [
      new Tracing()
      Origin.create({
        userId
        sessionId
      })
    ]
  })
  makeOKResponse(context)

makeAnonymousResponse() ->
  context = Context.create({
    type: 'user'
    items: [
      new Tracing()
      Origin.create({
        anonymousRequest: true
      })
    ]
  })
  makeOKResponse(context)

Check = withResources(
  {
    Config: "config"
  }
  ({Config}, req) -/>
    httpData = req?.attributes?.request?.http or {}
    { headers, method, path } = httpData

    log.trace("Check", {
      method, path
      context: req.attributes?.context_extensions
      source: req.attributes?.source
      dest: req.attributes?.destination
      http: req.attributes?.request?.http
    })

    cookies = if headers?.cookie:
      cookie.parse(headers.cookie)
    else:
      {}

    // Extract session token
    token = extractToken('mesh', headers, cookies)
    // No token = anonymous user
    if not token:
      log.trace("no token, anonymous request")
      return makeAnonymousResponse()

    log.trace("Check: got token", { token })

    // Decode JWT
    [decodedToken, err] <!- verifySessionJWT(token, Config.required('jwt_signing_secret'))

    if err:
      log.info({ err }, "could not decode authentication token")
      // XXX: punting here for debugging purposes
      // in actuality, this should fork on whether anonymous access is
      // allowed
      return makeDeniedResponse("invalid authentication token")

    return makeAuthenticatedResponse(decodedToken.sub, decodedToken.session)
)

export default {
  bindings: {
    'envoy.service.auth.v2.Authorization': {
      Check
    }
  }
}
