import { errors } from '@enmeshed/errors'
import { Protocols, withResources } from '@enmeshed/meshnode'

Protocols.require('test/Test.proto')

unary = withResources(
  {'events': 'events'}
  unary({events}, req) -/> {
    context = Context.current()
    log.info("server serving TestService.unary", { req })
    if req.message == 'fail':
      throw new errors.InternalError("failed call")
    else:
      events.fire('system.test', { message: req.message })
      { message: 'unary reply: ' + req.message + ' context: ' + JSON.stringify(context.toJSON()) }
  } // unary
)

export default {
  bindings: {
    "test.Test": {
      unary
    }
  }
}
