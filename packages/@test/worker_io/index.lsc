import path from 'path'
import { Container } from '@enmeshed/alpha'
import { singletonProvider, Log, StdoutLogWriter } from '@enmeshed/meshnode'
import { FileDataSource } from '@enmeshed/mesh-reflection-file-watcher'

// Data
import { bindings } from '@mesh/backend_models'

// GRPC
import EnvoyAuth from './grpc/EnvoyAuth'
import Test from './grpc/Test'
import DataManagementService from './grpc/DataManagementService'
import UserAuthService from './grpc/User'

// Events
import TestEvents from './events/Test'

// Jobs
import TestJobs from './jobs/Test'

// Log to stdout
Log.addWriter(new StdoutLogWriter())

// Provide cluster config to node
ds = new FileDataSource(path.resolve(process.argv[2], 'config', 'cluster.json'))
Container.provide(singletonProvider("node.reflectionDataSource", ds))

asyncMain() -/>
  //////////// Data Models
  dataMgr <- Container.get("model.manager")
  dataMgr.bindAll(bindings)

  //////////// GRPC services
  svcMgr <- Container.get("grpc.service.manager")
  svcMgr.bind('envoy_auth', EnvoyAuth.bindings)
  svcMgr.bind('goodbye', Test.bindings)
  svcMgr.bind('data_management', DataManagementService.bindings)
  svcMgr.bind('userauth', UserAuthService.bindings)

  // Offer all bound services
  <- svcMgr.autoStart()

  //////////// Event Handlers
  events <- Container.get('events')
  events.listenAll(TestEvents.bindings)

  ///////////// Job Processors
  jobs <- Container.get('jobs')
  jobs.processAll(TestJobs.bindings)

asyncMain()
  .catch! (err) ->
    console.error(err)
    process.exit(1)
