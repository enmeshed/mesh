import { sign, verify } from './jwt'

bcrypt = require('bcryptjs')
crypto = require('crypto')

sha256(str) ->
  crypto
    .createHash('sha256')
    .update(str)
    .digest('hex')

export makeCredential(type, data) ->
  match type:
    | 'email_and_password':
      makeEmailPasswordCredential(data)
    | else:
      throw new Error("makeCredential: invalid credential type")

makeEmailPasswordCredential({email, plaintextSecret}) -/>
  hash <- bcrypt.hash(plaintextSecret, 10)
  {
    credentialType: 'email_and_password'
    credentialKey: email
    algorithm: 'hash1'
    algorithmInput: { }
    algorithmCheck: { hash }
  }

export importLegacyCredential({ email, salt, hash }) ->
  {
    credentialType: 'email_and_password'
    credentialKey: email
    algorithm: 'legacy'
    algorithmInput: { salt }
    algorithmCheck: { hash }
  }

export checkCredential(credential, userInput) ->
  match credential.credentialType:
    | 'email_and_password':
      checkEmailPasswordCredential(credential, userInput)
    | else:
      throw new Error("invalid credential type")

checkEmailPasswordCredential({algorithm, algorithmInput, algorithmCheck}, {plaintextSecret}) -/>
  match algorithm:
    | 'hash1':
      val <- bcrypt.compare(plaintextSecret, algorithmCheck.hash)
      val
    | 'legacy':
      sha256(`${algorithmInput.salt}${plaintextSecret}`) == algorithmCheck.hash
    | else:
      throw new Error("invalid credential algorithm")

export issueSessionJWT(userId, sessionId, sessionLengthSeconds, secret): Promise<any> ->
  nowish = Math.floor(Date.now() / 1000)
  sign({
    iat: nowish
    exp: nowish + sessionLengthSeconds
    iss: "session_manager"
    aud: "session_manager"
    sub: userId
    session: sessionId
    subjectType: 'user'
  }, secret)

export verifySessionJWT(jwt, secret): Promise<any> ->
  verify(jwt, secret, {
    iss: "session_manager"
  })
