bcrypt = require('bcryptjs')

export makeCredential(type, data) ->
  match type:
    | 'email_and_password':
      makeEmailPasswordCredential(data)
    | else:
      throw new Error("makeCredential: invalid credential type")

makeEmailPasswordCredential({email, plaintextSecret}) -/>
  hash <- bcrypt.hash(plaintextSecret, 10)
  {
    credentialType: 'email_and_password'
    credentialKey: email
    algorithm: 'hash1'
    algorithmInput: { }
    algorithmCheck: { hash }
  }

export checkCredential(credential, userInput) ->
  match credential.credentialType:
    | 'email_and_password':
      checkEmailPasswordCredential(credential, userInput)
    | else:
      throw new Error("invalid credential type")

checkEmailPasswordCredential({algorithm, algorithmCheck}, {plaintextSecret}) -/>
  match algorithm:
    | 'hash1':
      val <- bcrypt.compare(plaintextSecret, algorithmCheck)
      val
    | else:
      throw new Error("invalid credential algorithm")
