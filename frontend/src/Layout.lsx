import React from 'react'
import { useMediaQuery } from 'react-responsive'
import { useStyletron } from 'baseui'

export useIsDesktop() ->
  [css, theme] = useStyletron()
  useMediaQuery({query: `(min-width: ${theme.breakpoints.large}px)`})

export useIsMobile() ->
  [css, theme] = useStyletron()
  useMediaQuery({query: `(max-width: ${theme.breakpoints.large}px)`})

export Desktop({children: renderProp}) ->
  rightSize = useIsDesktop()
  if rightSize:
    renderProp()
  else:
    null

export Mobile({children: renderProp}) ->
  rightSize = useIsMobile()
  if rightSize:
    renderProp()
  else:
    null

stickyTopContainerStyle = {
  display: 'flex'
  flexDirection: 'column'
  margin: 0
  padding: 0
  height: '100%'
  boxSizing: 'border-box'
}
stickyTopTopStyle = {
  width: '100%'
  flexShrink: 0
  flexGrow: 0
  boxSizing: 'border-box'
}
stickyTopContentStyle = {
  width: '100%'
  flexGrow: 1
  minHeight: 0
  maxHeight: '100%'
  margin: 0
  padding: 0
  boxSizing: 'border-box'
}
export StickyTop({children}) ->
  <div style={stickyTopContainerStyle}>
    <div style={stickyTopTopStyle}>
      {children[0]}
    </div>
    <div style={stickyTopContentStyle}>
      {children[1]}
    </div>
  </div>

export StickyTopAndBottom({children}) ->
  <div style={stickyTopContainerStyle}>
    <div style={stickyTopTopStyle}>
      {children[0]}
    </div>
    <div style={stickyTopContentStyle}>
      {children[1]}
    </div>
    <div style={stickyTopTopStyle}>
      {children[2]}
    </div>
  </div>

scrollAreaStyle = {
  height: '100%'
  width: '100%'
  overflowY: 'auto'
  boxSizing: 'border-box'
}
export VerticalScrollArea({children, style, ...restProps}) ->
  now style = if style: Object.assign({}, style, scrollAreaStyle) else: scrollAreaStyle
  <div style={style} {...restProps}>
    {children}
  </div>

leftDrawerContainerStyle = {
  display: 'flex'
  flexDirection: 'row'
  margin: 0
  padding: 0
  height: '100%'
  boxSizing: 'border-box'
}
export LeftDrawer({open, drawerWidth, children}) ->
  leftStyle = {
    height: "100%"
    width: if open: drawerWidth else: 0
    flexShrink: 0
    flexGrow: 0
    margin: 0
    padding: 0
    boxSizing: 'border-box'
  }
  rightStyle = {
    height: "100%"
    flexGrow: 1
    minWidth: 0
    minHeight: 0
    margin: 0
    padding: 0
    boxSizing: 'border-box'
  }

  <div style={leftDrawerContainerStyle}>
    <div style={leftStyle}>
      {children[0]}
    </div>
    <div style={rightStyle}>
      {children[1]}
    </div>
  </div>

centeredContainerStyle = {
  display: 'flex'
  flexDirection: 'column'
  justifyContent: 'center'
  alignItems: 'center'
  margin: 0
  padding: 0
  height: '100%'
  boxSizing: 'border-box'
}

export Centered({children}) ->
  <div style={centeredContainerStyle}>
    {children}
  </div>

hcContainerStyle = {
  display: 'flex'
  flexDirection: 'row'
  justifyContent: 'center'
  width: '100%'
  boxSizing: 'border-box'
}

export HCentered({style, children, ...restProps}) ->
  now style = if style: Object.assign({}, hcContainerStyle, style) else: hcContainerStyle
  <div style={style} {...restProps}>
    {children}
  </div>
