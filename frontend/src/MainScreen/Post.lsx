import React, { useEffect } from 'react'
import { useStyletron } from 'baseui'
import { useNavigate } from '@reach/router'

import { AppState } from 'App/Data/AppState'
import { WorkContext } from 'App/Util/WorkContext'
import { useSocialAccounts } from 'App/Data/useSocialAccounts'

import { FormControl } from 'baseui/form-control'
import { DatePicker } from 'baseui/datepicker'
import { TimePicker } from 'baseui/timepicker'
import { TimezonePicker } from 'baseui/timezonepicker'
import { Select } from 'baseui/select'
import { Textarea } from "baseui/textarea"
import { FileUploader } from "baseui/file-uploader"
import { Button } from 'baseui/button'
import { Tag } from 'baseui/tag'

import { VerticalScrollArea } from '../Layout'
import { FormSection, FormControlGroup, FormScreen } from 'App/Util/Forms'
import { SocialAccountSelect } from 'App/Util/SocialAccountSelect'

import SearchIcon from 'baseui/icon/search'
import FacebookIcon from 'App/Icons/facebook-f'
import TwitterIcon from 'App/Icons/twitter'

{ moment } = require('globalthis')()

class PostForm extends Form:
  // Stringify dates when pickling/unpickling
  pickle() ->
    pickled = super.pickle()
    pickled.date = pickled.date.toString()
    pickled.time = pickled.time.toString()
    pickled

  unpickle(values): void ->
    if typeof(values.date) == 'string': values.date = new Date(values.date)
    if typeof(values.time) == 'string': values.time = new Date(values.time)
    super.unpickle(values)

  getBlankValues() -> {
    date: new Date()
    time: new Date()
    zone: moment.tz.guess()
    text: ''
    targets: []
    image: {}
  }

dateFromContext(x) ->
  if x: new Date(x) else: null

// Create the form state for posting. We use an effect to bootstrap the initial
// state.
//
// There are 3 sources for the state; either a saved work context, a prepopulated
// post coming from location state, or a post that we're editing.
usePostState(location) ->
  [ date, setDate ] = React.useState(new Date())
  [ time, setTime ] = React.useState(new Date())
  [ zone, setZone ] = React.useState(moment.tz.guess())
  [ text, setText ] = React.useState('')
  [ targets, setTargets ] = React.useState([])
  [ image, setImage ] = React.useState({})

  initializationEffect(): void ->
    state = location?.state or {}
    // Claim work context
    ctx = WorkContext.current()
    if ctx.type == 'post':
      WorkContext.set(null)
    ctxState = ctx.state or {}

    setDate( dateFromContext(ctxState.date or state.date) or (new Date()) )
    setTime( dateFromContext(ctxState.time or state.time) or (new Date()) )
    setZone( ctxState.zone or state.zone or moment.tz.guess() )
    setTargets(  ctxState.targets or state.targets or [] )
    initialText = ctx.chosenContent?.body or ctxState.text or state.text or ''
    setText(initialText)
    setImage(ctx.chosenContent?.media?[0] or ctxState.image or {})

  useEffect(initializationEffect, [])

  {
    date, setDate, time, setTime, zone, setZone, text, setText
    targets, setTargets, image, setImage
  }

packagePostState(stateVector) ->
  {
    text: stateVector.text
    zone: stateVector.zone
    date: stateVector.date.toString()
    time: stateVector.time.toString()
    targets: stateVector.targets
  }


// Post form
PostForm({location}) ->
  postState = usePostState(location)
  {
    date, setDate, time, setTime, zone, setZone, text, setText
    targets, setTargets, image, setImage
  } = postState
  navigate = useNavigate()
  imageSrc = image?.fullUrl or image?.thumbUrl

  onCancel() -> navigate(-1)
  onRemoveImage() -> setImage({})
  onGetContent() ->
    WorkContext.set(new WorkContext({
      type: 'post'
      contextDescription: `Choose content for your Post.`
      returnTo: '/main/post'
      state: packagePostState(postState)
      hooks: {
        onChooseContent(context, content) ->
          console.log("chose content", content)
          context.chosenContent = content
          context.restore()
      }
    }))
    navigate('/main/content')

  // TODO: Char Count for text

  <React.Fragment>
    <FormSection title="Schedule">
      <FormControlGroup>
          <FormControl label="Date">
            <DatePicker
              value={[date]}
              onChange={ ({date}) -> setDate(if Array.isArray(date): date[0] else: date)}
              formatString="MM/dd/yyyy"
            />
          </FormControl>
          <FormControl label="Time">
            <TimePicker
              creatable
              value={time}
              onChange={ (time) -> setTime(time)}
            />
          </FormControl>
      </FormControlGroup>
      <FormControl label="Timezone">
        <TimezonePicker
          value={zone}
          onChange={ (zone) ->
            setZone(zone.id) }
        />
      </FormControl>
    </FormSection>

    <FormSection title="Targets">
      <FormControl label="Post To">
        <SocialAccountSelect
          placeholder="Choose target accounts..."
          targets={targets}
          setTargets={setTargets}
        />
      </FormControl>
    </FormSection>

    <FormSection title="Content">
      <Button onClick={onGetContent}>Get Content from Library</Button>
      <FormControl label="Text">
        <Textarea
          value={text}
          onChange={(ev) -> setText(ev.target.value)}
          placeholder="Enter the text to post..."
        />
      </FormControl>
      <FormControl label="Image">
        {if imageSrc:
            <img
              src={imageSrc}
              style={{
                maxWidth: '100%'
                maxHeight: '500px'
                objectFit: 'contain'
              }}
            />
        else:
          <FileUploader />
        }
      </FormControl>
      {if imageSrc:
        <Button onClick={onRemoveImage}>Remove Image</Button>
      }
    </FormSection>

    <FormControlGroup tight>
      <Button>Post</Button>
      <Button>Save Draft</Button>
      <Button kind="secondary" onClick={onCancel}>Cancel</Button>
    </FormControlGroup>
  </React.Fragment>

// Post screen
export Post({location}) ->
  <FormScreen>
    <PostForm location={location} />
  </FormScreen>
