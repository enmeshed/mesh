ICAL = require('ical.js')

{ moment } = require('globalthis')()

// Read an ICal calendar file, collating all events.
export class ICal:
  eventsByDate = {}
  sortedEvents = []

  finishEvents(): void ->
    this.sortedEvents.sort((a, b) -> a.time - b.time)
    return

  addEvent(icalTime, icalEvent): void ->
    { eventsByDate, sortedEvents } = this
    evs = eventsByDate[icalTime] or (eventsByDate[icalTime] = [])
    mom = moment([
      icalTime.year
      icalTime.month - 1
      icalTime.day
      icalTime.hour
      icalTime.minute
      icalTime.second
    ])
    data = {
      type: "ical"
      event: icalEvent
      time: mom.unix()
      summary: icalEvent.summary
    }
    evs.push(data)
    sortedEvents.push(data)

  // Load an iCal-formatted file into the events array
  loadICal(data): void ->
    jcal = ICAL.parse(data)
    comp = new ICAL.Component(jcal)
    events = comp.getAllSubcomponents("vevent")
    for elem eventData in events:
      event = new ICAL.Event(eventData)
      if event.isRecurring():
        iter = event.iterator()
        while not iter.complete:
          startDate = iter.next()
          if startDate:
            this.addEvent(startDate, event)
      else:
        this.addEvent(event.startDate, event)
    this.finishEvents()

  getEvents(dt) ->
    this.eventsByDate[dt or ''] or []

  getFirstEvent(dt) ->
    this.getEvents(dt)[0]

  getEventsBetween(unixt0, unixt1) ->
    { sortedEvents: events }= this
    result = []
    let idx = events.findIndex(x -> x.time >= unixt0)
    if idx == -1: return result
    while events[idx] and (events[idx].time <= unixt1):
      result.push(events[idx])
      idx++
    result
